@page "/profile"
@using AutoMapper;
@using Blogger.Application.Dtos;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Administrator, User")]
@inject IHttpClientFactory _httpClientFactory
@inject NavigationManager _navigationManager
@inject IToastService _toastService
@inject IMapper _mapper
@if (profile == null)
{
	<DisplayLoadingIcon />
}
else
{
	<div>
		<div class="container py-5">
			<div class="row">
				<div class="col">
					<nav aria-label="breadcrumb" class="bg-light rounded-3 p-3 mb-4">
						<ol class="breadcrumb mb-0">
							<li class="breadcrumb-item active" aria-current="page">User Profile</li>
						</ol>
					</nav>
				</div>
			</div>
			<EditForm Model="@profile" OnValidSubmit="UpdateProfile" @onreset="HandleReset">

				<DataAnnotationsValidator />
				@if (!string.IsNullOrEmpty(APIErrorMessages))
				{
					<p class="text-danger">@APIErrorMessages</p>
				}

				<div class="row">
					<div class="col-12 mb-3">
						<label class="form-label">Email address</label>
						<InputText @bind-Value="profile.Email" class="form-control" placeholder="Your Email" readonly="true" />
						<ValidationMessage For="@(() => profile.Email)" />
					</div>
					<div class="col-6 mb-3">
						<label class="form-label">Password</label>
						<InputText @bind-Value="profile.Password" class="form-control" type="password" placeholder="Password" />
						<ValidationMessage For="@(() => profile.Password)" />
					</div>
					<div class="col-6 mb-3">
						<label class="form-label">Confirm Password</label>
						<InputText @bind-Value="profile.ConfirmPassword" class="form-control" type="password" placeholder="Confirm Password" />
						<ValidationMessage For="@(() => profile.ConfirmPassword)" />
					</div>
					<div class="col-6 mb-3">
						<label class="form-label">First Name</label>
						<InputText @bind-Value="profile.FirstName" class="form-control" placeholder="First Name" />
						<ValidationMessage For="@(() => profile.FirstName)" />
					</div>
					<div class="col-6 mb-3">
						<label class="form-label">Last Name</label>
						<InputText @bind-Value="profile.LastName" class="form-control" placeholder="Last Name" />
						<ValidationMessage For="@(() => profile.LastName)" />
					</div>
					<div class="col-6 mb-3">
						<label class="form-label">Gender</label>
						<InputSelect @bind-Value="profile.Gender" class="form-control" placeholder="Gender">
							<option value=""></option>
							<option value="Mr">Mr</option>
							<option value="Mrs">Mrs</option>
							<option value="Miss">Miss</option>
							<option value="Ms">Ms</option>
						</InputSelect>
						<ValidationMessage For="@(() => profile.Gender)" />
					</div>
					<div class="col-6 mb-3">
						<label class="form-label">Date Of Birth</label>
						<InputDate @bind-Value="profile.DateOfBirth" class="form-control" placeholder="Date of Birth" />
						<ValidationMessage For="@(() => profile.DateOfBirth)" />
					</div>
					<div class="col-12 mb-3">
						<label class="form-label">Address</label>
						<InputTextArea @bind-Value="profile.Address" class="form-control" placeholder="Address" />
						<ValidationMessage For="@(() => profile.Address)" />
					</div>

					<div class="col-12">
						<input type="submit" value="Update" class="btn btn-primary">
					</div>
				</div>
			</EditForm>			
		</div>
	</div>
}
@code {
	UserRegistrationDto profile;
	private string APIErrorMessages;
	[CascadingParameter]
	private Task<AuthenticationState> authenticationState { get; set; }

	protected async override Task OnInitializedAsync()
	{				
		var authState = await authenticationState;
		var user = authState.User;

		if (user.Identity.IsAuthenticated)
		{
			try
			{
				var email = user.FindFirst(ClaimTypes.Email)?.Value;
				var httpClient = _httpClientFactory.CreateClient("blog");
				var response = await httpClient.GetAsync($"/api/Users/GetUserDetailsByEmail/{email}");

				if (response.StatusCode == HttpStatusCode.BadRequest)
				{
					var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
					if (errors.Count > 0)
					{
						foreach (var item in errors)
						{
							foreach (var errorMessage in item.Value)
							{
								APIErrorMessages = !string.IsNullOrEmpty(APIErrorMessages) ? $"{APIErrorMessages} | {errorMessage}" : $"{errorMessage}";
							}
						}
					}
					_toastService.ShowError(APIErrorMessages);
				}
				else if (response.IsSuccessStatusCode)
				{
					var userInfo = await response.Content.ReadFromJsonAsync<UserDto>();
					// using mapper, not assign by  each property as traditional.
					profile = _mapper.Map<UserRegistrationDto>(userInfo);
					profile.ConfirmPassword = userInfo.Password;
				}
				else
				{
					_toastService.ShowError("Error on calling API");
				}						
			}
			catch (Exception ex)
			{
				APIErrorMessages = ex.Message;
			}
		}
		else
		{
			_navigationManager.NavigateTo("/login");
		}
	}
	async Task OnKeyPress(KeyboardEventArgs args)
	{
		if (args.Key == "Enter")
			await UpdateProfile();
	}

	private async Task UpdateProfile()
	{
		var httpClient = _httpClientFactory.CreateClient("blog");
		//var response = await httpClient.PutAsJsonAsync<UserRegistrationDto>("/api/Users", profile);
		var response = await httpClient.PostAsJsonAsync<UserRegistrationDto>("/api/Users/Profile", profile);

		if (response.StatusCode == HttpStatusCode.BadRequest)
		{
			var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
			if (errors.Count > 0)
			{
				foreach (var item in errors)
				{
					foreach (var errorMessage in item.Value)
					{
						APIErrorMessages = !string.IsNullOrEmpty(APIErrorMessages) ? $"{APIErrorMessages} | {errorMessage}" : $"{errorMessage}";
					}
				}
			}
			_toastService.ShowError(APIErrorMessages);
		}
		else if (response.IsSuccessStatusCode)
		{
			_toastService.ShowSuccess("Update Profile successfully");
		}
		else
		{
			_toastService.ShowError("Error on calling API");
		}
	}
	private void HandleReset()
	{
		profile = new UserRegistrationDto();
	}
}
