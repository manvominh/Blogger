@page "/"
@using Blogger.Domain.Entities;
@using Blogger.Application.Interfaces.Services;
@inject IHttpClientFactory _httpClientFactory
@inject IToastService _toastService
@if (Posts == null)
{
	<p><em>Loading...</em></p>
}
else
{
	@if (!string.IsNullOrEmpty(APIErrorMessages))
	{
		<p class="text-danger">@APIErrorMessages</p>
	}
	var postCount = Posts.Count();
	@if (postCount > 0)
	{
		<div class="section search-result-wrap">
			<div class="container">
				<div class="row posts-entry">
					<div class="col-lg-12">
						@foreach(var item in Posts)
						{
							<div class="blog-entry d-flex blog-entry-search-item">
								<a href="/postdetails/@item.Id" class="img-link me-4">
									<img src="images/@item.Image" alt="Image" class="img-fluid">
								</a>
								<div>
									<span class="date">@item.PublishedDate</span>
									<h2><a href="/postdetails/@item.Id">@item.Title</a></h2>
									<p>@item.Introduction</p>
									<p><a href="/postdetails/@item.Id" class="btn btn-sm btn-outline-primary">Read More</a></p>
								</div>
							</div>
						}
						



						@* 					<div class="row text-start pt-5 border-top">
				<div class="col-md-12">
				<div class="custom-pagination">
				<span>1</span>
				<a href="#">2</a>
				<a href="#">3</a>
				<a href="#">4</a>
				<span>...</span>
				<a href="#">15</a>
				</div>
				</div>
				</div> *@

					</div>

				</div>
			</div>
		</div>
	}
	else
	{
		<p><em>There is no posts.</em></p>
	}	
}
@code{
	public IEnumerable<Post> Posts { get; set; }
	[Inject]
	public IPostService PostService { get; set; }
	private string APIErrorMessages;
	protected override async Task OnInitializedAsync()
	{
		try
		{
			var httpClient = _httpClientFactory.CreateClient("blog");
			var response = await httpClient.GetAsync($"api/Posts/");

			if (response.StatusCode == HttpStatusCode.BadRequest)
			{
				var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
				if (errors.Count > 0)
				{
					foreach (var item in errors)
					{
						foreach (var errorMessage in item.Value)
						{
							APIErrorMessages = !string.IsNullOrEmpty(APIErrorMessages) ? $"{APIErrorMessages} | {errorMessage}" : $"{errorMessage}";
						}
					}
				}
				_toastService.ShowError(APIErrorMessages);
			}
			else if (response.IsSuccessStatusCode)
			{
				Posts = await response.Content.ReadFromJsonAsync<IEnumerable<Post>>();
			}
			else
			{
				_toastService.ShowError("Error on calling API");
			}
		}
		catch (Exception ex)
		{
			//ErrorMessage = ex.Message;
			throw;
		}

	}
}
