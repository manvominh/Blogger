@page "/editpost/{postId:int}"

@using AutoMapper;
@using Blogger.Application.Dtos;
@using Blogger.Application.Interfaces.Services;
@using Blazored.TextEditor
@using System.Security.Claims;
@using Blogger.WebUI.Pages.Common;
@attribute [Authorize(Roles = "Administrator, User")]
@inject IHttpClientFactory _httpClientFactory
@inject IToastService _toastService
@inject NavigationManager _navigationManager
@inject IMapper _mapper
@if (post == null)
{
	<DisplayLoadingIcon />
}
else
{
	<div>
		<div class="container py-5">
			<div class="row">
				<div class="col">
					<nav aria-label="breadcrumb" class="bg-light rounded-3 p-3 mb-4">
						<ol class="breadcrumb mb-0">
							<li class="breadcrumb-item active" aria-current="page"><h3>Edit Post</h3></li>
						</ol>
					</nav>
				</div>
			</div>
			<EditForm Model="@post" OnValidSubmit="UpdatePost">

				<DataAnnotationsValidator />
				@if (!string.IsNullOrEmpty(APIErrorMessages))
				{
					<p class="text-danger">@APIErrorMessages</p>
				}

				<div class="form-group">
					<label class="form-label">Title</label>
					<InputText @bind-Value="post.Title" class="form-control" Placeholder="Enter Title" />
					<ValidationMessage For="@(() => post.Title)" />
				</div>
				<div class="form-group">
					<label class="form-label">Introduction</label>
					<InputText @bind-Value="post.Introduction" class="form-control" Placeholder="Enter Introduction" />
					<ValidationMessage For="@(() => post.Introduction)" />
				</div>
				<div class="form-group">
					<label class="form-label">Image</label>&nbsp;
					<img src="@post.ImageUrl" style="width: 250px; height: 150px;">&nbsp;&nbsp;<InputFile OnChange="@OnInputFileChanged"></InputFile>
					@if (!string.IsNullOrEmpty(ErrorImageUrl))
					{
						<p class="text-danger">@ErrorImageUrl</p>
					}
				</div>
				<div class="form-group" style="height:150px" placeholder="Enter Body Post">
					<label>Body Post</label>
					<BlazoredTextEditor @ref="@QuillHtml">
						<ToolbarContent>
							<select class="ql-header">
								<option selected=""></option>
								<option value="1"></option>
								<option value="2"></option>
								<option value="3"></option>
								<option value="4"></option>
								<option value="5"></option>
							</select>
							<span class="ql-formats">
								<button class="ql-bold"></button>
								<button class="ql-italic"></button>
								<button class="ql-underline"></button>
								<button class="ql-strike"></button>
							</span>
							<span class="ql-formats">
								<select class="ql-color"></select>
								<select class="ql-background"></select>
							</span>
							<span class="ql-formats">
								<button class="ql-list" value="ordered"></button>
								<button class="ql-list" value="bullet"></button>
								<button class="ql-indent" value="-1"></button>
								<button class="ql-indent" value="+1"></button>
								<select class="ql-align">
									<option selected=""></option>
									<option value="center"></option>
									<option value="right"></option>
									<option value="justify"></option>
								</select>
							</span>
							<span class="ql-formats">
								<button class="ql-link"></button>
							</span>
						</ToolbarContent>
						<EditorContent>
							
						</EditorContent>
					</BlazoredTextEditor>
					@if (!string.IsNullOrEmpty(APIErrorMessages))
					{
						<p class="text-danger">@ErrorBodyText</p>
					}
				</div>
				<br />
				<div class="form-group" style="padding-top: 75px;">
					<label class="form-label">Publish</label>
					<InputCheckbox @bind-Value="post.IsPublished" />
				</div>
				<br />
				<div class="form-group">
					<input type="submit" value="Update Post" class="btn btn-primary">
				</div>

			</EditForm>
		</div>
	</div>
}

@code {
	[Parameter]
	public int postId { get; set; }
	public string BodyPost { get; set; }
	public string ErrorBodyText { get; set; }
	public string ErrorImageUrl { get; set; }
	public int UserId { get; set; }

	[CascadingParameter]
	private Task<AuthenticationState> authenticationState { get; set; }

	PostDto post;
	BlazoredTextEditor QuillHtml;
	private string APIErrorMessages;

	protected async override Task OnInitializedAsync()
	{

		var authState = await authenticationState;
		var user = authState.User;

		if (user.Identity.IsAuthenticated)
		{
			UserId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
			if (postId != 0)
			{
				var httpClient = _httpClientFactory.CreateClient("blog");
				var response = await httpClient.GetAsync($"/api/Posts/{postId}");

				if (response.StatusCode == HttpStatusCode.BadRequest)
				{
					var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
					if (errors.Count > 0)
					{
						foreach (var item in errors)
						{
							foreach (var errorMessage in item.Value)
							{
								APIErrorMessages = !string.IsNullOrEmpty(APIErrorMessages) ? $"{APIErrorMessages} | {errorMessage}" : $"{errorMessage}";
							}
						}
					}
					_toastService.ShowError(APIErrorMessages);
				}
				else if (response.IsSuccessStatusCode)
				{
					var postInfo = await response.Content.ReadFromJsonAsync<PostDto>();
					if (postInfo.UserId != UserId) return;
					post = _mapper.Map<PostDto>(postInfo);
				}
				else
				{
					_toastService.ShowError("Error on calling API");
				}
			}
		}
		else
		{
			_navigationManager.NavigateTo("/login");
		}	
	}
	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender) return;
		bool loading = true;
		while (loading)
		{
			try
			{
				if (!string.IsNullOrEmpty(post.BodyText))
				{
					await this.QuillHtml.LoadHTMLContent(post.BodyText);
					loading = false;
				}
			}
			catch
			{
				await Task.Delay(10);
				loading = true;
			}
		}
	}
	async Task OnKeyPress(KeyboardEventArgs args)
	{
		if (args.Key == "Enter")
			await UpdatePost();
	}
	private async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
	{
		//get the file
		var file = inputFileChangeEvent.File;

		//read that file in a byte array
		var buffer = new byte[file.Size];
		await file.OpenReadStream(1512000).ReadAsync(buffer);

		//convert byte array to base 64 string
		post.ImageUrl = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
	}
	private async Task UpdatePost()
	{
		if (!(await ValidatePost())) return;

		post.BodyText = BodyPost;
		post.UserId = UserId;
		var httpClient = _httpClientFactory.CreateClient("blog");
		var response = await httpClient.PutAsJsonAsync<PostDto>("/api/Posts", post);
		if (response.StatusCode == HttpStatusCode.BadRequest)
		{
			var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
			if (errors.Count > 0)
			{
				foreach (var item in errors)
				{
					foreach (var errorMessage in item.Value)
					{
						APIErrorMessages = !string.IsNullOrEmpty(APIErrorMessages) ? $"{APIErrorMessages} | {errorMessage}" : $"{errorMessage}";
					}
				}
			}
			_toastService.ShowError(APIErrorMessages);
		}
		else if (response.IsSuccessStatusCode)
		{
			_toastService.ShowSuccess("Update Post successfully");
		}
		else
		{
			_toastService.ShowError("Error on calling API");
		}
	}
	private void HandleReset()
	{
		post = new PostDto();
	}
	private async Task<bool> ValidatePost()
	{
		BodyPost = await this.QuillHtml.GetHTML();
		if (BodyPost.Replace(" ", string.Empty).Equals("<p></p>"))
		{
			string msgErrorBody = "Body Text is not empty. Please enter Body Post.";
			//_toastService.ShowError(msgErrorBody);
			ErrorBodyText = msgErrorBody;
			return false;
		}
		ErrorBodyText = string.Empty;
		if (string.IsNullOrEmpty(post.ImageUrl))
		{
			string msgErrorImageUrl = "Post must have an image. Please choose an image to upload.";
			//_toastService.ShowError(msgErrorImageUrl);
			ErrorImageUrl = msgErrorImageUrl;
			return false;
		}
		ErrorImageUrl = string.Empty;
		return true;
	}
}
