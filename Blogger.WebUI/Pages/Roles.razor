@page "/roles"

@using Blogger.Domain.Entities;
@using Blogger.Application.Interfaces.Services;
@using Microsoft.AspNetCore.Authorization;

@attribute [Authorize(Roles = "Administrator")]
@inject IHttpClientFactory _httpClientFactory
@inject IToastService _toastService

<h3>Roles</h3>
@if (roles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    //var userCount = roles.Count();
    <!--Table-->
    <table class="table table-striped w-auto">

        <!--Table head-->
        <thead>
            <tr>
                <th>Role Name</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <!--Table head-->
        <!--Table body-->
        <tbody>
            @foreach (var item in roles)
            {
                <tr class="table-info">
                    <td>@item.Name</td>
                    <td><i class="fas fa-edit fa-lg me-3 fa-fw" /></td>
                    <td><i class="fas fa-trash fa-lg me-3 fa-fw" /></td>
                </tr>
            }
        </tbody>
        <!--Table body-->

    </table>
    <!--Table-->
}
@code {
    public IEnumerable<Role> roles { get; set; }
    [Inject]
    public IRoleService RoleService { get; set; }
    private string APIErrorMessages;
    protected override async Task OnInitializedAsync()
    {
        var httpClient = _httpClientFactory.CreateClient("blog");
        var response = await httpClient.GetAsync($"api/Roles/");

        if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
            if (errors.Count > 0)
            {
                foreach (var item in errors)
                {
                    foreach (var errorMessage in item.Value)
                    {
                        APIErrorMessages = !string.IsNullOrEmpty(APIErrorMessages) ? $"{APIErrorMessages} | {errorMessage}" : $"{errorMessage}";
                    }
                }
            }
            _toastService.ShowError(APIErrorMessages);
        }
        else if (response.IsSuccessStatusCode)
        {
            roles = await response.Content.ReadFromJsonAsync<IEnumerable<Role>>();
        }
        else
        {
            _toastService.ShowError("Error on calling API");
        }
    }
}
