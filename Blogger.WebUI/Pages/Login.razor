@page "/login"

@using Blogger.Application.Dtos

@inject NavigationManager _navigationManager
@inject IJSRuntime js
@inject ILocalStorageService _localStorageService

@inject AuthenticationStateProvider authStateProvider
@inject IHttpClientFactory _httpClientFactory;
@inject IToastService _toastService
<h3>Login</h3>
<div class="section">
	<div class="container">
		<div class="row">
			<div class="col-lg-8" >
                <EditForm EditContext="@editContext" OnValidSubmit="Authenticate">

                    <DataAnnotationsValidator />

                    @if (!string.IsNullOrEmpty(APIErrorMessages))
                    {
                        <p class="text-danger">@APIErrorMessages</p>
                    }

                    <div class="row">
                        <div class="col-6 mb-3">
                            <label class="form-label">Email address</label>
                            <InputText @bind-Value="loginDto.Email" class="form-control" placeholder="Your Email" />
                            <ValidationMessage For="@(() => loginDto.Email)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-6 mb-3">
                            <label class="form-label">Password</label>
                            <InputText @bind-Value="loginDto.Password" class="form-control" type="password" placeholder="Password" />
                            <ValidationMessage For="@(() => loginDto.Password)" />
                        </div>
                        <div class="col-12">
                            <input type="submit" value="Login" class="btn btn-primary">
                            <p class="small fw-bold mt-2 pt-1 mb-0">
                                Don't have an account? <a href="/register"
                                                          class="link-danger">Register</a>
                            </p>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    
</div>

@code {
    LoginDto loginDto = new LoginDto();
    private EditContext editContext;
    private string APIErrorMessages;
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(loginDto);
        var authState = await authenticationState;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo("/profile");
        }
    }

    async Task OnKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            await Authenticate();
    }

    private async Task Authenticate()
    {
        var httpClient = _httpClientFactory.CreateClient("blog");
        var response = await httpClient.PostAsJsonAsync<LoginDto>("/api/Users/Login", loginDto);
        //var authState = await authenticationState;
        if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
            if (errors.Count > 0)
            {
                foreach (var item in errors)
                {
                    foreach (var errorMessage in item.Value)
                    {
                        APIErrorMessages = $"{errorMessage}";
                    }
                }
            }
        }
        else if (response.IsSuccessStatusCode)
        {
            var jwtTokens = await response.Content.ReadFromJsonAsync<Tokens>();

            if (jwtTokens != null && !string.IsNullOrEmpty(jwtTokens.Access_Token) && !string.IsNullOrEmpty(jwtTokens.Refresh_Token))
            {
                await _localStorageService.SetItemAsync("jwt_token", jwtTokens.Access_Token);
                await _localStorageService.SetItemAsync("refresh_token", jwtTokens.Refresh_Token);
                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                customAuthStateProvider.NotifyAuthState();
                _toastService.ShowSuccess("Login successfully.");
                _navigationManager.NavigateTo("/", true);
            }
            else
            {
                _toastService.ShowError("Invalid username or password");
            }
        }
        else //if (response.StatusCode == HttpStatusCode.Unauthorized)
        {
            _toastService.ShowError("Login Failed Plase try after some time");
        }
    }
}
