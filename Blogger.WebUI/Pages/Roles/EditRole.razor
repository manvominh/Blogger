@using AutoMapper;
@using Blogger.Application.Dtos;
@using System.Security.Claims;
@using Blogger.WebUI.Pages.Common;
@attribute [Authorize(Roles = "Administrator")]
@inject IHttpClientFactory _httpClientFactory
@inject NavigationManager _navigationManager
@inject IToastService _toastService
@inject IMapper _mapper
@if (roleDto == null)
{
	<DisplayLoadingIcon />
}
else
{	
	<EditForm EditContext="@editContext" OnValidSubmit="UpdateRole" @onreset="HandleReset">

		<DataAnnotationsValidator />
		@if (!string.IsNullOrEmpty(APIErrorMessages))
		{
			<p class="text-danger">@APIErrorMessages</p>
		}

		<div class="row">
			<div class="col-12 mb-3">
				<label class="form-label">Name</label>
				<InputText @bind-Value="roleDto.Name" class="form-control" placeholder="Enter Role Name" />
				<ValidationMessage For="@(() => roleDto.Name)" />
			</div>
					
			<div class="col-12">
				<input type="submit" value="@(roleId != 0 ? "Update" : "Save") " class="btn btn-primary">
				<input value="Cancel" @onclick="Close" class="btn">
			</div>
		</div>
	</EditForm>
}
@code {
	[CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
	[CascadingParameter] private IModalService Modal { get; set; } = default!;
	[Parameter]
	public int roleId { get; set; }
	RoleDto roleDto;
	private EditContext editContext;
	private string APIErrorMessages;	

	[CascadingParameter]
	private Task<AuthenticationState> authenticationState { get; set; }

	protected async override Task OnInitializedAsync()
	{				
		var authState = await authenticationState;
		var user = authState.User;

		if (user.Identity.IsAuthenticated)
		{
			try
			{
				if (roleId != 0)
				{
					var httpClient = _httpClientFactory.CreateClient("blog");
					var response = await httpClient.GetAsync($"/api/Roles/{roleId}");

					if (response.StatusCode == HttpStatusCode.BadRequest)
					{
						var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
						if (errors.Count > 0)
						{
							foreach (var item in errors)
							{
								foreach (var errorMessage in item.Value)
								{
									APIErrorMessages = !string.IsNullOrEmpty(APIErrorMessages) ? $"{APIErrorMessages} | {errorMessage}" : $"{errorMessage}";
								}
							}
						}
						_toastService.ShowError(APIErrorMessages);
					}
					else if (response.IsSuccessStatusCode)
					{
						roleDto = await response.Content.ReadFromJsonAsync<RoleDto>();
					}
					else
					{
						_toastService.ShowError("Error on calling API");
					}
				}
				else
					roleDto = new RoleDto();

			}
			catch (Exception ex)
			{
				APIErrorMessages = ex.Message;
			}
		}
		else
		{
			_navigationManager.NavigateTo("/login");
		}
		editContext = new EditContext(roleDto);
	}
	async Task OnKeyPress(KeyboardEventArgs args)
	{
		if (args.Key == "Enter")
			await UpdateRole();
	}

	private async Task UpdateRole()
	{
		var httpClient = _httpClientFactory.CreateClient("blog");
		var response = await httpClient.PutAsJsonAsync<RoleDto>("/api/Roles", roleDto);
		if (response.StatusCode == HttpStatusCode.BadRequest)
		{
			var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
			if (errors.Count > 0)
			{
				foreach (var item in errors)
				{
					foreach (var errorMessage in item.Value)
					{
						APIErrorMessages = !string.IsNullOrEmpty(APIErrorMessages) ? $"{APIErrorMessages} | {errorMessage}" : $"{errorMessage}";
					}
				}
			}
			_toastService.ShowError(APIErrorMessages);
		}
		else if (response.IsSuccessStatusCode)
		{
			await BlazoredModal.CloseAsync(ModalResult.Ok("success"));
		}
		else
		{
			_toastService.ShowError("Error on calling API");
			await BlazoredModal.CloseAsync(ModalResult.Ok("failed"));
		}
	}
	private async Task Close()
	{
		await BlazoredModal.CloseAsync(ModalResult.Ok("close"));
	}
	private void HandleReset()
	{
		roleDto = new RoleDto();
		editContext = new EditContext(roleDto);
	}
}
