@page "/postdetails/{postId:int}"
@using Blogger.Application.Dtos;
@using Blogger.Application.Interfaces.Services;
@using Blogger.Domain.Entities;
@using System.Security.Claims;
@inject IHttpClientFactory _httpClientFactory
@inject NavigationManager _navigationManager
@inject IToastService _toastService
@if (Post == null)
{
	<p><em>Loading...</em></p>
}
else
{
    @if (!string.IsNullOrEmpty(APIErrorMessages))
    {
        <p class="text-danger">@APIErrorMessages</p>
    }
<section class="section">
    <div class="container">

        <div class="row blog-entries element-animate">

            <div class="col-md-12 col-lg-8 main-content">

                <div class="post-content-body">
                    <p><b>@Post.Title</b></p>
                    <p>@Post.Introduction</p>
                    <div class="row my-4">
                        <div class="col-md-12 mb-4">
                            <img src="images/@Post.Image" alt="Image placeholder" class="img-fluid rounded">
                        </div>
                    </div>
                        <p>@((MarkupString)Post.BodyText)</p>
                </div>


@*                 <div class="pt-5">
                    <p>Categories:  <a href="#">Food</a>, <a href="#">Travel</a>  Tags: <a href="#">#manila</a>, <a href="#">#asia</a></p>
                </div> *@


                <div class="pt-5 comment-wrap">
                        @if (!IsAuthenticed)
                        {
                            <p class="text-warning">You have to be <a href="/login" class="text-danger">logged in</a> before you can comment.</p>
                        }
                        else
                        {
                            <div class="comment-form-wrap pt-5">
                                <h3 class="mb-5">Leave a comment</h3>
                                <EditForm Model="@commentModel" OnValidSubmit="@AddComment" class="p-5 bg-light">
                                    <InputTextArea class="form-control" @bind-Value="@commentModel.CommentText" />
                                    <ValidationMessage For="@(() => commentModel.CommentText)" />
                                    <button type="submit" class="btn btn-primary">Add Comment</button>
                                </EditForm>
                            </div>
                        }
                    <h3 class="mb-5 heading">@Post.Comments.Count Comments</h3>
                    <ul class="comment-list">
                        @foreach(var comment in Post.Comments)
                        {
                            <li class="comment">
                                <div class="vcard">
                                    <img src="images/person_1.jpg" alt="Image placeholder">
                                </div>
                                <div class="comment-body">
                                            <h3>@comment.User.FirstName @comment.User.LastName</h3>
                                    <div class="meta">@comment.CreatedDate.ToString() @*  January 9, 2018 at 2:21pm *@</div>
                                    <p>@comment.CommentText</p>
                                    <p><a href="#" class="reply rounded">Reply</a></p>
                                </div>
                            </li>
                        }
                    </ul>
                    <!-- END comment-list -->

                </div>

            </div>

            <!-- END main-content -->


        </div>
    </div>
</section>
}
@code {
    [Parameter]
    public int postId { get; set; }
    public Post Post { get; set; }
    [Inject]
    public IPostService PostService { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private bool IsAuthenticed{ get; set; }
    private int UserId{ get; set; }
    public CommentDto commentModel = new CommentDto();
    private string APIErrorMessages;
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            IsAuthenticed = user.Identity.IsAuthenticated;
            UserId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        }

        await GetPostDetails();
    }
    public async Task GetPostDetails()
    {
        var httpClient = _httpClientFactory.CreateClient("blog");
        var response = await httpClient.PostAsJsonAsync("/api/Posts/PostDetails", postId);
        if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
            if (errors.Count > 0)
            {
                foreach (var item in errors)
                {
                    foreach (var errorMessage in item.Value)
                    {
                        APIErrorMessages = !string.IsNullOrEmpty(APIErrorMessages) ? $"{APIErrorMessages} | {errorMessage}" : $"{errorMessage}";
                    }
                }
            }
            _toastService.ShowError(APIErrorMessages);
        }
        else if (response.IsSuccessStatusCode)
        {
            Post = await response.Content.ReadFromJsonAsync<Post>();
            if (Post == null)
            {
                _toastService.ShowSuccess("Get Post Details failed.");
            }

        }
        else
        {
            _toastService.ShowError("Error on calling API");
        }
    }
    public async Task AddComment()
    {
        if(IsAuthenticed)
        {
            var httpClient = _httpClientFactory.CreateClient("blog");
            commentModel.PostId = postId;
            commentModel.UserId = UserId;
            var response = await httpClient.PostAsJsonAsync<CommentDto>("/api/Comments/SaveComment", commentModel);
            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
                if (errors.Count > 0)
                {
                    foreach (var item in errors)
                    {
                        foreach (var errorMessage in item.Value)
                        {
                            APIErrorMessages = !string.IsNullOrEmpty(APIErrorMessages) ? $"{APIErrorMessages} | {errorMessage}" : $"{errorMessage}";
                        }
                    }
                }
                _toastService.ShowError(APIErrorMessages);
            }
            else if (response.IsSuccessStatusCode)
            {
                _toastService.ShowSuccess("Save Comment Successfully.");
                commentModel.CommentText = string.Empty;
                await GetPostDetails();
                StateHasChanged();
            }
            else
            {
                _toastService.ShowError("Error on calling API");
            }
        }
        else
        {
            _navigationManager.NavigateTo("/login");
        }
    }
}
